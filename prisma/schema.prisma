// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imageUrl  String?
  firstName String?
  lastName  String?

  emailAddress   String          @unique
  credits        Int             @default(150)
  userToProjects UserToProject[] //projects assigned to the user
  askedQuestions Question[] //questions asked by the user
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  githubUrl String

  deletedAt            DateTime?
  userToProject        UserToProject[] //users assigned to the project
  commits              Commit[] //commits made to the project
  sourceCodeEmbeddings SourceCodeEmbedding[] //source code embeddings of the project
  savedQuestions       Question[] //questions saved by the user
}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId]) // A user can only be assigned to a project once
}

model Question {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question String
  answer   String

  filesReferences Json?

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Commit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  commitMessage      String
  commitHash         String
  commitDate         DateTime
  commitAuthorName   String
  commitAuthorAvatar String

  summary String //Ai generated summary
}

model SourceCodeEmbedding {
  id String @id @default(cuid())

  summaryEmbedding Unsupported("vector(768)")? //vector embedding of the summary
  sourceCode       String //actual source code
  fileName         String
  summary          String //Ai generated summary of the source code

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade) //project to which the source code belongs
}
